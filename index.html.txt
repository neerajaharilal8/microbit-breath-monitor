<!DOCTYPE html>
<html>
<head>
    <title>Micro:bit Breath Rate Monitor</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <!-- Chart.js for graphing -->
    <script>
        let bluetoothDevice;
        let uartCharacteristic;
        let breathRates = [];
        let timeLabels = [];

        async function connectToMicrobit() {
            try {
                bluetoothDevice = await navigator.bluetooth.requestDevice({
                    acceptAllDevices: true,
                    optionalServices: ['6e400001-b5a3-f393-e0a9-e50e24dcca9e'] // UART service
                });

                const server = await bluetoothDevice.gatt.connect();
                const service = await server.getPrimaryService('6e400001-b5a3-f393-e0a9-e50e24dcca9e');
                uartCharacteristic = await service.getCharacteristic('6e400002-b5a3-f393-e0a9-e50e24dcca9e');

                uartCharacteristic.startNotifications();
                uartCharacteristic.addEventListener('characteristicvaluechanged', handleData);

                document.getElementById("status").innerText = "Connected to Micro:bit";
            } catch (error) {
                console.error("Connection failed", error);
                alert("Connection failed! Try again.");
            }
        }

        function handleData(event) {
            let decoder = new TextDecoder("utf-8");
            let receivedText = decoder.decode(event.target.value);
            let breathRate = parseInt(receivedText.trim());

            if (!isNaN(breathRate)) {
                document.getElementById("breathRate").innerText = "Breath Rate: " + breathRate + " BPM";
                
                let currentTime = new Date().toLocaleTimeString();
                breathRates.push(breathRate);
                timeLabels.push(currentTime);

                if (breathRates.length > 10) { // Keep last 10 values
                    breathRates.shift();
                    timeLabels.shift();
                }

                updateChart();

                // Alert if breath rate is out of range
                if (breathRate < 30 || breathRate > 50) {
                    alert("⚠️ Warning: Abnormal breathing detected!");
                }
            }
        }

        function updateChart() {
            breathChart.data.labels = timeLabels;
            breathChart.data.datasets[0].data = breathRates;
            breathChart.update();
        }
    </script>
</head>
<body>
    <h1>Micro:bit Breath Rate Monitor</h1>
    <button onclick="connectToMicrobit()">Connect to Micro:bit</button>
    <h2 id="status">Not Connected</h2>
    <h2 id="breathRate">Breath Rate: -- BPM</h2>
    
    <canvas id="breathChart" width="400" height="200"></canvas>
    <script>
        const ctx = document.getElementById('breathChart').getContext('2d');
        const breathChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Breath Rate (BPM)',
                    borderColor: 'blue',
                    backgroundColor: 'lightblue',
                    data: []
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
</body>
</html>